webpack  打包工具 转换工具 模块加载器
vue-cli 脚手架  (搭建项目环境)  命令行工具
es6模块化


webpack:	
	干嘛的:	项目管理、打包、模块管理、加载资源(js/css/html/png../woff/data/vue...),转换器
	前身：grunt/gulp/browserify->webpack

	官网：http://webpack.github.io/  1.x  2.x
		  https://webpack.js.org/    3.x 

webpack的历史
	webpack1支持CMD和AMD，同时拥有丰富的plugin和loader，webpack逐渐得到广泛应用。
	webpack2 支持ES Module，分析ESModule之间的依赖关系，webpack1必须将ES，Module转换成CommonJS模块，2支持tree sharking
	webpack3 新的特性大都围绕ES Module提出，如Scope Hoisting和Magic Comment；

使用流程:
	安装: 条件   node + npm/yarn/bower环境
		1.	全局环境安装   npm install webpack -g   装的是命令行工具
		2.	项目环境安装   npm init -y -> npm install webpack -D  状态的是项目管理环境
	打包:
		webpack a.js b.js	把a文件打包到b
	加载资源:
		非js的资源，需要loader(转换器),loader就是个包

		加载css : 	npm install css-loader style-loader

		es6 转 es5 : babel-loader babel-core babel-preset-es201

创建项目环境: 
	vue init webpack-simple 目录    webpack-simple|webpack  模板
	cd 目录
	npm install
	npm run dev  运行
	开发....
	npm run build 打包
--------------------------------------------------------
模块化路由   npm install vue-router -D
	0.	import VueRoter from 'vue-router'  -> Vue.use(VueRouter) 安装
	1. 使用路由 (去哪)
		<router-link to="/home">首页</router-link>
  		<router-view>展示区</router-view>
  		router-link 组件属性  
			tag='li' 指定编译后的标签
			active-class='类名' 指定激活后的样式
	2. 配置路由(建立组件和请求的对应关系)	数组
		[{path:'/home',component:home},,{}]
		path 路径
		component: 指向的组件变量名
	3. 创建路由(传递配置)
		router = new VueRouter(配置)
		配置:	{routes:数组}
	4. 顶层|根组件，注册路由 （路由控制页面组件的加载）
		选项
			router(选项):router (router对象)
项目DEMO:
	
------------------------------------
vue-cli + vue-router + axios + vue-aniamte + .....   全家桶


新闻客户端
	1. 环境搭建(vue-cli +  vue-router + axios + vuex == 全家桶)
	2. 项目分析(组件安排)
		dist
			|-...
		data:
			|-数据.json
			....
		src
			|-assets
				|-js
				|-css
				|-image
			|-component
				|-	navbar.vue / footbar.vue
				|-	home.vue / follow.vue / column.vue / user.vue
				|-  detail.vue / login.vue / reg.vue
				|-	silder.vue / error.vue
			|-filters
				date.js
				fillzero.js
			|-loading
				index.js
				|-component
					|-loading.vue
			|-store
				|-index.jsebpack搭建前端web服务器的工具webpack-dev-server)
安装:	npm install webpack-dev-server -g
	webpack-dev-server 开启web服务器  localhost:8080

				|-actions.js
				|-mutations.js
				|-getters.js
				|-state.js
				|-types.js
			main.js
			App.vue
			router.config.js
		package.json
		webpack.config.js
	3. 布局
		a) 切图(需要设计稿)
		b) UI库	(bootstrap/elelementUI pc端 / mintUI移动端)
		c) html+css模板 移植 到 组件

	4. 路由搭建

	5. 数据交互+全局过滤器+全局组件（loading）

	6. 非状态管理（控制导航显示)
		this.$root  返回的是根实例  new Vue (main.js)  
		this.$root.$data.根数据名;
		this.$root.$data.根数据名=值

	7. 状态管理  store
		什么时候用： 打算开发中大型应用
		集中式数据管理, 一处修改，多处使用

		思维流程:
											store.js
					this.$store.commit('increment')	-> mutations
					this.$store.dispatch('jia')		-> actions			
				     mapActions() ->actions								mapGetters()->getters
				学生		代课老师		校长		 财务     版主任		学生
			components - >  actions		->  mutations -> state  <- getters	<-	components
				发送请求      处理			修改状态	 	
							  业务逻辑		修改state			   读取state
							  异步
							  							state<-$store.state <-  学生
	-----------------------------------------------------------------------------
	安装 vuex 状态管理插件
	引入 + use

	------------------------------------------------------------------------------
	mapActions/mapGetters  执行后， 返回来的是对象
		对象:	{incremen:fn,decrement:fn,xx,xx}
	------------------------------------------------------------------------------
	this.$store.commit('increment',参数/负载/payload) -> mutations
	this.$store.dispatch('increment',参数/负载/payload)  -> actions

	const actions = {
		increment:({store对象},参数)=>{}
	}

	<xx @click="请求类型(负载)"   actions: 请求类型:({},payload)=>{payload==负载}
	......
-----------------------------------------------------------------------------	

数据传递，数据流动，流向控制  
		0)   父->子 props属性       子->父  事件
		a)   A -> A父  ->  子B    A B 要有共同父   父==中间人默认
		b)   订阅发布模式  下载pubsub 库   创建空的Vue实例 实例.$emit 发布|$on 订阅
		c) 	web存储(cookie,localstroge/seession)
		d) 	存库
		e)  状态管理
		f)  非状态管理  把数据存到Vue的根组件上(data) 其他组件$root.$data 访问及修改

		永久: 存库 , localstroge
		临时：状态管理,订阅发布模式
-----------------------------------------------------------------------------

推荐 vue-xxxx 的组件  npm 下载  代替 

vue-swipe:
	npm i vue-swipe -D  安装
	import './node_modules/vue-swipe/dist/vue-swipe.css'; 引入样式
	import { Swipe, SwipeItem } from 'vue-swipe'; 引入组件

	Vue.component('swipe', Swipe);    注册安装
	Vue.component('swipe-item', SwipeItem);

	注册到选项components 私有使用

购物车(store):

	
解决前后端服务器共存
		大后端：
			 nodejs + express + router + ejs		后端处理路由，渲染页面
			 html + css + js效果  http://localhost:3000   public
		大前端：
			Vue-cli + vue-router + axios/resource 	前端处理路由
				this.$http(url:接口,params:{keyvalue})
			nodeJs + express 
				负责:写接口,处理后端到库，send（库数据) json() write+end()
		前后端分离：
			跨域：需要后台允许的， 设置头
				a)  逐条设置  
					res.setHeader('Access-Control-Allow-Origin', req.headers.origin)
					问题：每一个路由都要设置
				b)  统一设置(中间件cors)
					app.use(cors({
					  "origin": ['http://localhost:8080'],
					  methods: "GET,HEAD,PUT,PATCH,POST,DELETE",
					  allowedHeaders:['Content-Type', 'Authorization']
					}));


 跨源凭证
		ajax跨源请求数据，默认不提供凭据(cookie,http认证，客户端SSL证明)
		流程：假设
			vue->用户中心->vue发送请求->nodejs响应判断无session,返回给vue->vue路由切换到登录页面->vue发送登录请求->nodejs响应，兜库，种cookie(需要凭证)，返回用户数据->vue 路由跳转，传递接受到的数据给 "用户中心组件"

			切换到其他路由，再切回来（用户中心)->vue发送请求->nodejs响应判断有session,返回vue的是 已登录|兜库拿用户数据
		使用携带跨源凭据|反向跨域
			前端: 携带
				a)	逐条允许 axios({})
					withCredentials: true,//携带跨源凭证
				b) axios.defaults.withCredentials=true 
			后端：允许携带
				a) 逐条允许
					res.setHeader('Access-Control-Allow-Credentials', true);
				b) 中间件统一配置(cors)
					

	前端原生：请求头里面带凭证，带cookie
	var xhr = new XMLHttpRequest(); 
	xhr.open("post", "xxx/xxx", true);
	xhr.withCredentials = true;		放在 open 方法后面比较靠谱
	xhr.onload = function(){}
	xhr.send("a=1&b=2");

	前端jqAjax:	请求头里面带凭证，带cookie
		$.ajax({
			type:'get',
			url:"http://localhost:3000/logouts",
			dataType:"json",
			xhrFields: {
				withCredentials: true
			},
			success:function(data){
				console.log(data);
			}
		})
		前端:vue-resource
				this.$http.get(url,{credentials:true}) 追条

			Vue.http.interceptors.push(function(request, next) {
			  request.credentials = true  统一
			  next();
			});
yuanliang